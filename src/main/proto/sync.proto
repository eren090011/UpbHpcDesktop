syntax = "proto3";

option go_package = "./services";
package sync;

service SyncService {
    rpc Ping (PingRequest) returns (PingReply);
    
    rpc Sync(SyncRequest) returns (SyncResponse);
    rpc Upload(stream FileUploadRequest) returns(FileUploadResponse);
    rpc Download(DownloadRequest) returns (stream DownloadResponse);
    
    rpc UploadBlocks(stream UploadBlockRequest) returns (UploadResponse) {} 
    rpc DownloadBlocks(DownloadBlockRequest) returns (stream DownloadBlockResponse) {} 
}

message SyncRequest {
  string sep = 1;
  string user = 2;
  map<string, FileData> clientTree = 3; 
  repeated string toRemove = 4;
}

message SyncResponse {
  map<string, FileList> elements = 1;
  repeated ChecksumsList toUpdate = 2;
  repeated ChecksumsList toClientUpdate = 3;
}

message UploadBlockRequest {
  string path = 1;
  Block block = 2;
}

message DownloadBlockRequest {
  string path = 1;
  uint64 number = 2;
  int64 block_size = 3;
  string user = 4;
}

message DownloadBlockResponse {
  string path = 1;
  Block block = 2;
}

message Block {
  bool reference = 1; 
  uint32 number = 2;
  bytes payload = 3;
}

message FileData {
  string path = 1;
  string fingerprint = 2;
  string folderFingerprint = 3;
  string modified = 4;
  bool isDir = 5;
  string permissions = 6;
  int64 size = 7;
}

message FileList {
  repeated FileData elements = 1;
}

message Checksum {
  string strong = 1;
}

message ChecksumsList {
  string path = 1;
  uint32 block_size = 2;
  repeated Checksum checksums = 3;
}

message PingRequest {}

message PingReply {
  string message = 1;
}

message FileUploadRequest {
  string fileName = 1;
  string folderFingerprint = 2;
  bytes chunk = 3;
  string username = 4;
}

message FileUploadResponse {
  
}

message DownloadRequest {
  string fingerprint = 1;
}

message DownloadResponse {
  bytes chunk = 1;
}

// message SyncElement {
//     string sep =1;
//     string path = 2;
// }

// message Element {
//     string path = 1;
//     bool is_dir = 2;
//     string mod_time = 3;
// }

//PASO 1

//Cliente envía una lista de todos sus elementos actuales
//Además envía una lista de paths que han sido eliminados localmente --> o fingerprints?

//El servidor responde con una lista de elementos que el cliente debe eliminar o crear
//Además el servidor envía una lista de los elementos que requiere para crear localmente o actualizar
//Solo contiene los paths donde va a suceder esto


//PASO 2
//1. DELETE (server-local) --> El servidor elimina los archivos indicados por el cliente (si existen).
//2. DELETE (client-local) --> El cliente elimina los archivos indicados por el servidor (siempre existen).

//3. CREATE (client-Download) --> El cliente pide al servidor los archivos para crear localmente, es decir, los descarga.
//4. CREATE (client-Upload) --> El cliente envía todos los archivos que el servidor solicita y el servidor los almacena.

//5. UPDATE (client-UploadBlocks) El cliente solicita (stream a cliente) los cambios en los archivos que indica el servidor que debe actualizar.
//6. UPDATE (client-DownloadBlocks) El cliente envía (stream a server) los cambios a los archivos que el servidor debe actualizar.

//Se envía el checksum de cada archivo a actualizar

message ChecksumResponse {
    string path = 1;
    string checksum = 2;
    repeated Checksum checksums = 3;
}

message UploadResponse {
}

message sendBlocksRquest {
}



// message SyncRequest {
//     string sep = 1;
//     repeated Element elements = 2;
// }

// message Element {
//     string path = 1;
//     bool is_dir = 2;
//     int64 mod_time = 3;
// }

// message SyncResponse {
// }

// message DiffRequest {
//     string sep = 1;
//     repeated Element created = 2;
//     repeated Element deleted = 3;
// }

// message DiffResponse {
// }

// message ChecksumRequest {
//     string path = 1;
//     string checksum = 2;
//     uint32 block_size = 3;
// }

// message ChecksumResponse {
//     string path = 1;
//     string checksum = 2;
//     repeated Checksum checksums = 3;
// }

// message Checksum {
//     uint32 weak = 1;
//     string strong = 2;
// }

// message UploadResponse {
// }

// message Block {
//     bool reference = 1;
//     uint32 number = 2;
//     bytes payload = 3;
// }